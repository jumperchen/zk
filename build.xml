<?xml version="1.0"?>
<!DOCTYPE project [
	<!ENTITY properties SYSTEM "build.prop.xml">
	<!ENTITY targets SYSTEM "build.target.xml">
]>

<!-- build.xml
	Purpose:
		The internal build file for ant.
	Description:
		It is invoked by the bash script, build, to do the proper
		intialization.
		This build file is used only internally. For SDK to build user's
		projects, use another file
	History:
		March 29 15:11 2001, Created by henrichen
		August 21 14:27 2002, Created by tomyeh

Copyright (C) 2002 Potix Corporation. All Rights Reserved.
-->

<project name="potix.inside" default="build" basedir=".">
<!-- ======= -->
<!-- INITIAL -->
<!-- ======= -->
	&properties;

<!-- ====== -->
<!-- CONFIG -->
<!-- ====== -->
	<target name="verbose" if="verbose.required">
	<!-- show the current environment -->
		<echo message="${project.name}: ${project.version}"/>
		<echo message=""/>

		<echo message="java.class.path = ${java.class.path}"/>
		<echo message=""/>
		<echo message="java.home = ${java.home}"/>
		<echo message="out.dir = ${out.dir}"/>
		<echo message="debug = ${debug}"/>
		<echo message="optimize = ${optimize}"/>
		<echo message="unchecked = ${unchecked}"/>
	</target>

	<target name="config" depends="verbose">
		<!--tstamp/-->

		<available file="${src.mesg.dir}" property="src.mesg.dir.exist"/>
		<available file="${src.dir}" property="src.dir.exist"/>
		<available file="${srcpv.dir}" property="srcpv.dir.exist"/>

		<condition property="javac.unchecked" value="-Xlint:unchecked">
			<not>
				<equals arg1="${unchecked}" arg2="off"/>
			</not>
		</condition>
		<condition property="javac.unchecked" value="-Xlint:-unchecked">
			<equals arg1="${unchecked}" arg2="off"/>
		</condition>

		<condition property="war.dir" value="${src.archive.dir}">
			<available file="${src.archive.dir}" type="dir"/>
		</condition>
		<condition property="war.dir" value="WebContent">
			<not>
				<available file="${src.archive.dir}" type="dir"/>
			</not>
		</condition>

		<!-- format -->
		<condition property="build.ear.required">
			<equals arg1="${format}" arg2="ear"/>
		</condition>
		<condition property="build.zweb">
			<equals arg1="${project.name}" arg2="zweb"/>
		</condition>
		<condition property="build.jar.required">
			<or>
				<equals arg1="${format}" arg2="jar"/>
				<equals arg1="${format}" arg2="jar2"/>
			</or>
		</condition>
		<condition property="build.jar2.required">
			<equals arg1="${format}" arg2="jar2"/>
		</condition>
		<condition property="build.war.required">
			<equals arg1="${format}" arg2="war"/>
		</condition>

		<condition property="compile.required">
			<or>
				<or>
					<equals arg1="${format}" arg2="jar"/>
					<equals arg1="${format}" arg2="jar2"/>
				</or>
				<equals arg1="${format}" arg2="war"/>
			</or>
		</condition>

		<condition property="gentime.required">
			<not>
				<equals arg1="${gentime}" arg2=""/>
			</not>
		</condition>

		<!-- deploy -->
		<condition property="deploy.lib.required">
			<equals arg1="${deploy}" arg2="lib"/>
		</condition>
		<condition property="deploy.server.required">
			<equals arg1="${deploy}" arg2="server"/>
		</condition>

		<!-- deploy tomcat -->
		<available file="${tomcat.home}" property="tomcat.exist"/>
		<condition property="deploy.tomcat.required">
			<and>
				<isset property="tomcat.exist"/>
				<isset property="deploy.server.required"/>
				<equals arg1="${format}" arg2="deploy"/>
			</and>
		</condition>
		<condition property="deploy.tomcat.intact.required">
			<and>
				<isset property="deploy.tomcat.required"/>
				<not>
					<isset property="deploy.unzip.list"/>
				</not>
			</and>
		</condition>
		<condition property="deploy.tomcat.unzip.required">
			<and>
				<isset property="deploy.tomcat.required"/>
				<isset property="deploy.unzip.list"/>
			</and>
		</condition>

		<condition property="start.service.required">
			<and>
				<isset property="deploy.tomcat.required"/>
				<not>
					<equals arg1="${start.service}" arg2=""/>
				</not>
			</and>
		</condition>

		<!-- clean relevant -->
		<condition property="clean.all.required">
			<isset property="do.all"/>
		</condition>
	</target>
	<target name="config.build" depends="config">
		<mkdir dir="${codegen.dir}"/>
	</target>

<!-- ======= -->
<!-- TARGETS -->
<!-- ======= -->
	&targets;

</project>
